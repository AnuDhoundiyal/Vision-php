```php
<?php
/**
 * VisionNEX PHP Attendance System - Database Configuration
 * Centralized database connection with error handling using Singleton pattern
 */

class Database {
    private static $instance = null;
    private $connection;
    
    // Database credentials
    private $host = 'localhost';        // Change to your MySQL host
    private $username = 'root';         // Change to your MySQL username  
    private $password = '';             // Set your MySQL password here
    private $database = 'system';       // Database name (must match imported schema)
    
    /**
     * Private constructor to prevent direct instantiation.
     * Establishes the database connection.
     */
    private function __construct() {
        try {
            $this->connection = new mysqli(
                $this->host, 
                $this->username, 
                $this->password, 
                $this->database
            );
            
            if ($this->connection->connect_error) {
                throw new Exception("Connection failed: " . $this->connection->connect_error);
            }
            
            $this->connection->set_charset("utf8mb4");
            
        } catch (Exception $e) {
            // Log the error for debugging, but show a user-friendly message
            error_log("Database connection error: " . $e->getMessage());
            die("Database connection failed. Please check configuration and try again later.");
        }
    }
    
    /**
     * Get the single instance of the Database class.
     *
     * @return Database
     */
    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new Database();
        }
        return self::$instance;
    }
    
    /**
     * Get the MySQLi connection object.
     *
     * @return mysqli
     */
    public function getConnection() {
        return $this->connection;
    }
    
    /**
     * Execute a SQL query.
     *
     * @param string $sql The SQL query string.
     * @return mysqli_result|bool
     */
    public function query($sql) {
        return $this->connection->query($sql);
    }
    
    /**
     * Prepare a SQL statement.
     *
     * @param string $sql The SQL query string.
     * @return mysqli_stmt|bool
     */
    public function prepare($sql) {
        return $this->connection->prepare($sql);
    }
    
    /**
     * Escape a string for use in SQL queries.
     *
     * @param string $string The string to escape.
     * @return string
     */
    public function escape($string) {
        return $this->connection->real_escape_string($string);
    }
    
    /**
     * Get the ID generated by the last INSERT query.
     *
     * @return int
     */
    public function getLastInsertId() {
        return $this->connection->insert_id;
    }
    
    /**
     * Get the last error message from the database connection.
     *
     * @return string
     */
    public function getError() {
        return $this->connection->error;
    }

    /**
     * Close the database connection.
     */
    public function close() {
        if ($this->connection) {
            $this->connection->close();
        }
    }
}

// Global function for backward compatibility (if needed, though direct usage of Database::getInstance() is preferred)
function get_db() {
    return Database::getInstance()->getConnection();
}

// Initialize database connection globally for convenience
$db = Database::getInstance();
$conn = $db->getConnection();
```